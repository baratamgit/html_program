Function: Functions are used to perform a specific task. we divide our code into smaller reusable blocks to make code more easy to read and debug. They are called Functions.
syntax: function function_name(parameters) --> function prototype
{
    //function body/definition;
}
function_name() //function call 

function add()
{
    let a = 10, b = 20;
    let c = a + b;
    console.log(c);//30
}
add()

--> functions can even take parameters such that every time we use dynamic inputs 
function adds(a,b)
{
    let c = a + b;
    console.log(c);//101
}
adds(34,67)

--> we can assign default parameters in function prototype
function adds(a,b=25)
{
    let c = a + b;
    console.log(c);
}
adds(34)//59
adds(45,67)//112

--> functions can even return the values
function fun(x)
{
    return x.lenght;
}
let res = fun("shannu")
console.log(res); //6
console.log(fun)

--> function are called "first class citizens" in javascript
--> function expressions: functions can be expressed as a variable where an  anonymous function names with variable is called function expression.
let puppy = function(n)
{
    console.log(`hello world ${n}`) //hello world shannu
}
puppy("shannu")
console.log(puppy);

--> Arrow functions: Arrow functions are nothing but function expressions but with a modern syntax. if definition has only  one statement, no need of braces or return keyword
let sub3 = (b,a) => b-a;
console.log(sub3(23,12))//11

let EvenOdd = (n) => n%2==0?'even':'odd'
console.log(EvenOdd(5));//odd

---> callback functions: callback functions are the functions that are given as parameters to another function.It is widely used for inter-functional dependencies
syntax: function function1()
{
    
}
function function2(x)
{
      x()  
}
function2(function1)

---> functions can be called itself immediately called IIFE(Immediate Invoke function expression)
syntax: (function(){
    //body
})();
These functions should be written at the top of code and it is used for security

---> JS functions also have a concept called "closure." closure means, In a nested  function, Inner function remembers outer function values even after outer function execution ended.

closures are used for 'memorization' techniques.

